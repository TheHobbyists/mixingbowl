'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = require('events');

var _util = require('./util');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Client = function (_EventEmitter) {
    _inherits(Client, _EventEmitter);

    function Client(options) {
        _classCallCheck(this, Client);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Client).call(this));

        _this.options = Object.assign({
            debug: false,
            ping: { timeout: 1000, interval: 3000 }
        }, options);

        _this.connect = _this.newConnector();
        (0, _util.bubble)('error', _this.connect, _this);
        (0, _util.bubble)('close', _this.connect, _this);

        // By default Node throws when errors are emitted without a listener.
        // But it's quite bad at printing out those errors. We'll watch
        // and process for uncaught error events manually.
        _this.on('error', function (err) {
            if (_this.listeners('error').length > 1) {
                return;
            }

            /* eslint-disable no-console */
            console.error(_this.prettyError(err));
            /* eslint-enable */
        });

        if (_this.options.debug) {
            _this.connect.on('raw-message', function (data) {
                return _this.logEntry(data, true);
            }).on('sending', function (data) {
                return _this.logEntry(data, false);
            });
        }
        return _this;
    }

    /**
     * Logs an incoming/outgoing series of bytes. Used in debug mode.
     * @param  {*} data
     * @param  {Boolean} incoming
     */


    _createClass(Client, [{
        key: 'logEntry',
        value: function logEntry(data, incoming) {
            var now = new Date();
            var message = now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds() + ' ';

            message += (0, _util.strRepeat)(incoming ? '<' : '>', 3);
            message += ' ';

            if (Buffer.isBuffer(data)) {
                message += data.toString('hex');
            } else {
                message += data;
            }

            /* eslint-disable no-console */
            console.log(message);
            /* eslint-enable */
        }

        /**
         * Pretty-prints a client error.
         * @param  {Error} err
         */

    }, {
        key: 'prettyError',
        value: function prettyError(err) {
            var divider = (0, _util.strRepeat)('-', 20) + ' \'';
            var output = divider;
            output += 'Uncaught error in the tetris ' + this.constructor.name + ' client.\n\n';
            output += '    > ' + err.toString() + '\n\n';
            output += 'Client options:\n';
            output += (0, _util.indent)(JSON.stringify(this.options, null, '  '), 1);
            output += '\n\n';

            if (err.stack) {
                output += 'Stack trace: ' + err.stack + '\n\n';
            }

            if ((typeof err === 'undefined' ? 'undefined' : _typeof(err)) === 'object' && Object.keys(err).length > 0) {
                output += 'Error: \n';
                output += (0, _util.indent)(JSON.stringify(err, null, '  '), 1);
                output += '\n\n';
            }

            output += divider + '\n';

            return output;
        }

        /**
         * Creates and returns a new Connector based on the client options.
         * @protected
         * @return {Connector}
         */

    }, {
        key: 'newConnector',
        value: function newConnector() {
            throw new Error('not implemented');
        }

        /**
         * Sends a packet to the underlying connection.
         * @param  {Object} packet
         */

    }, {
        key: 'send',
        value: function send(packet) {
            this.connect.send(packet);
        }

        /**
         * Sends a packet that a responses is expected to.
         * @param  {Object}   packet
         * @param  {Function} response Class of the packet response.
         * @param  {Function} callback
         */

    }, {
        key: 'call',
        value: function call(packet, response, callback) {
            this.connect.call(packet, response, callback);
        }

        /**
         * Closes the client and the underlying connection.
         */

    }, {
        key: 'close',
        value: function close() {
            this.connect.close();
        }
    }]);

    return Client;
}(_events.EventEmitter);

exports.default = Client;