'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _errors = require('./errors');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Heartbeat = function () {

    /**
     * The Heartbeater attaches to a socket and is responsible for monitoring
     * the connections state and emitting a `close` event if the connection
     * is detected to be dead.
     * @param  {Number} interval number of ms between heartbeat packets.
     * @param  {Number} timeout  duration in ms to be considered dead if we
     *                           don't get a ping back from the server.
     */
    function Heartbeat(interval, timeout) {
        _classCallCheck(this, Heartbeat);

        this._socket = null;
        this._interval = interval;
        this._timeout = timeout;

        this._timers = [];
    }

    /**
     * Starts the heartbeat pinging on the socket.
     * @param  {Socket} socket
     * @return {Heartbeats}
     */


    _createClass(Heartbeat, [{
        key: 'start',
        value: function start(socket) {
            var _this = this;

            this._socket = socket;
            this.touch();

            socket.on('error', function () {
                return _this.close();
            });
            socket.on('close', function () {
                return _this.close();
            });
            socket.on('message', function () {
                return _this.touch();
            });

            return this;
        }

        /**
         * Called at an interval to send a ping packet from to Tetrisd.
         * If/when the ping is reponded to, you may call .touch().
         */

    }, {
        key: '_ping',
        value: function _ping() {
            throw new Error('not implement');
        }

        /**
         * Touch tells the heartbeater that data was received from the server.
         */

    }, {
        key: 'touch',
        value: function touch() {
            var _this2 = this;

            this._timers.forEach(function (t) {
                return clearTimeout(t);
            });

            this._timers = [setTimeout(function () {
                return _this2._ping();
            }, this._interval), setTimeout(function () {
                _this2._socket.emit('error', new _errors.PingTimeoutError());
                _this2._socket.close();
            }, this._interval + this._timeout)];
        }

        /**
         * Closes the heartbeater. Called when the socket is closed.
         */

    }, {
        key: 'close',
        value: function close() {
            this._timers.forEach(function (t) {
                return clearTimeout(t);
            });
        }
    }]);

    return Heartbeat;
}();

exports.default = Heartbeat;