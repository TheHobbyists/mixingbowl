'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PingTimeoutError = exports.UnexpectedServerResponse = exports.AssertionError = exports.UnknownPacketError = exports.FatalCodingError = exports.CodingError = undefined;

var _lodash = require('lodash.assignin');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function extendError(name, methods) {
  /* eslint-disable no-new-func */
  var Err = new Function('\n        return function ' + name + '(message) {\n            const err = new Error(message);\n            this.stack = err.stack;\n            this.message = err.message;\n            if (this.constructor) {\n                this.constructor.apply(this, arguments);\n            }\n        };\n    ')();
  /* eslint-enable */

  Err.prototype = Object.create(Error.prototype);
  (0, _lodash2.default)(Err.prototype, methods);

  return Err;
}

/**
 * Type of error thrown when there's an issue with encoding or decoding.
 */
var CodingError = exports.CodingError = extendError('CodingError');

/**
 * This error is thrown when there is a fatal error.
 */
var FatalCodingError = exports.FatalCodingError = extendError('FatalCodingError');

/**
 * Thrown when we get an packet that we don't know about.
 * @property {Buffer|String} data the packet's raw data, including its ID.
 */
var UnknownPacketError = exports.UnknownPacketError = extendError('UnknownPacketError', {
  constructor: function constructor(id, data) {
    this.message = 'Unknown packet ID ' + id;
    this.data = data;
  }
});

/**
 * Error type thrown by util.assert. Fill since browsers don't have
 * assert functions.
 */
var AssertionError = exports.AssertionError = extendError('AssertionError');

/**
 * Sent when we get a response that we didn't like when trying to
 * connect to the websocket.
 */
var UnexpectedServerResponse = exports.UnexpectedServerResponse = extendError('UnexpectedServerResponse');

/**
 * Emitted on sockets if a ping frame is sent without a pong message
 * being returned after a certain interval.
 */
var PingTimeoutError = exports.PingTimeoutError = extendError('PingTimeoutError');