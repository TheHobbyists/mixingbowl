'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _errors = require('../errors');

var _lodash = require('lodash.isplainobject');

var _lodash2 = _interopRequireDefault(_lodash);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var idLength = 4;

var BasicPacket = function () {
    function BasicPacket() {
        _classCallCheck(this, BasicPacket);
    }

    _createClass(BasicPacket, [{
        key: 'encode',


        /**
         * Encodes the packet to a string to be sent over the websocket.
         * @return {String}
         */
        value: function encode() {
            var encoded = void 0;
            if (typeof this.props.toJSON === 'function') {
                encoded = this.props.toJSON();
            } else if ((0, _lodash2.default)(this.props)) {
                encoded = JSON.stringify(this.props);
            } else {
                encoded = this.props;
            }

            return this.id + encoded;
        }

        /**
         * Gets a property of the packet, deeply.
         * @param  {String} prop
         * @return {*}
         */

    }, {
        key: 'get',
        value: function get(prop) {
            var parts = prop.split('.');

            var obj = this.props;
            while (parts.length && obj !== undefined && obj !== null) {
                obj = obj[parts.shift()];
            }

            return obj;
        }

        /**
         * Returns a plain object of the packet properties.
         * @return {Object}
         */

    }, {
        key: 'toObject',
        value: function toObject() {
            return this.props;
        }

        /**
         * Encodes the packet to a JSON string. This is NOT for wire transfer:
         * use encode() if you need to send the packet to tetrisd.
         * @return {String}
         */

    }, {
        key: 'toJSON',
        value: function toJSON() {
            return JSON.stringify(this.props);
        }
    }]);

    return BasicPacket;
}();

function packet(name, id) {
    (0, _util.assert)(id.length === idLength, 'expected length of ID "' + id + '"" to be ' + idLength);

    // We do a bit of eval here so that the packet is generated with
    // a nice name for debugging purposes.
    /* eslint-disable no-new-func */
    var Packet = new Function('\n        return function ' + name + ' (obj) {\n            this.props = obj;\n            this.id = \'' + id + '\';\n        };\n    ')();
    /* eslint-enable */

    Packet.prototype = Object.create(BasicPacket.prototype);

    /**
     * Returns whether the packet give in the string matches this one.
     * @param  {String} str
     * @return {Boolean}
     */
    Packet.matches = function matches(str) {
        return str.slice(0, idLength) === id;
    };

    /**
     * Attempts to decode the packet from the given string. Throws a
     * TypeError if the string is of the wrong type.
     * @param  {String} str
     * @return {Packet}
     * @throws TypeError if the string is of the wrong type
     */
    Packet.decode = function packetDecode(str) {
        var parsed = void 0;
        try {
            parsed = JSON.parse(str.slice(id.length));
        } catch (e) {
            throw new _errors.FatalCodingError(e);
        }

        return new Packet(parsed);
    };

    return Packet;
}

var packets = {
    Handshake: packet('Handshake', 'hshk'),
    HandshakeACK: packet('HandshakeACK', 'hack'),
    Report: packet('Report', 'data'),
    Error: packet('Error', 'erro'),
    Progress: packet('Progress', 'prog'),
    Playbook: packet('Playbook', 'play'),
    PlaybookACK: packet('PlaybookACK', 'pack'),
    PlaybookState: packet('PlaybookState', 'prdy'),
    Ping: packet('Ping', 'ping')
};

/**
 * Decodes a packet from a string.
 * @param  {String} str
 * @return {Packet}
 * @throws {CodingError}
 */
Object.defineProperty(packets, 'decode', {
    value: function value(str) {
        if (!str || str.length < idLength) {
            throw new _errors.FatalCodingError('Incomplete JSON packet.', str);
        }

        var keys = Object.keys(packets);
        for (var i = 0; i < keys.length; i++) {
            var p = packets[keys[i]];
            if (p.matches(str)) {
                return p.decode(str);
            }
        }

        throw new _errors.UnknownPacketError(str.slice(0, idLength), str);
    }
});

exports.default = Object.freeze(packets);