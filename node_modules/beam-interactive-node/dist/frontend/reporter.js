'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _packets = require('./packets');

var _packets2 = _interopRequireDefault(_packets);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The reporter is responsible for building report data and
 * aggregating it if frequent input is given.
 */
var Reporter = function () {

    /**
     * Creates a new Reporter.
     * @param  {Client} client
     * @param  {Number} interval
     */
    function Reporter(client, interval) {
        _classCallCheck(this, Reporter);

        this.client = client;
        this.interval = interval;
        this.resetQueued();
    }

    /**
     * Adds report data to the queue.
     * @param {Object} data
     * @param {Function} [callback] fired when the report is sent
     */


    _createClass(Reporter, [{
        key: 'add',
        value: function add(data) {
            var _this = this;

            var callback = arguments.length <= 1 || arguments[1] === undefined ? _util.noop : arguments[1];

            this._mergeTactile(data);
            this._mergeJoystick(data);
            this._mergeScreen(data);

            if (!this.waiting) {
                var delay = this.lastSent + this.interval - Date.now();
                setTimeout(function () {
                    return _this.runSend();
                }, Math.max(0, delay));
                this.waiting = true;
            }

            this.queued.callbacks.push(callback);
        }

        /**
         * Merges queued tactile data with that of the given report.
         * @param  {Object} data
         */

    }, {
        key: '_mergeTactile',
        value: function _mergeTactile(data) {
            var report = this.queued.report;

            var _loop = function _loop(i) {
                var right = data.tactile[i];
                var left = (0, _util.find)(report.tactile, function (l) {
                    return l.id === right.id;
                });

                if (left !== undefined) {
                    left.down = (0, _util.addIf)(left.down, right.down);
                    left.up = (0, _util.addIf)(left.up, right.up);
                } else {
                    report.tactile.push(right);
                }
            };

            for (var i = 0; data.tactile && i < data.tactile.length; i++) {
                _loop(i);
            }
        }

        /**
         * Merges provided joystick input data with that of the queued report.
         * @param  {Object} data
         */

    }, {
        key: '_mergeJoystick',
        value: function _mergeJoystick(data) {
            var report = this.queued.report;

            for (var i = 0; data.joystick && i < data.joystick.length; i++) {
                this._mergeCoordinates(report.joystick, data.joystick[i]);
            }
        }

        /**
         * Merges a coordinate report with the corresponding
         * record in the array, averaging its means if one exists
         * or creating a new report if it doesn't.
         *
         * @param  {Array} arr
         * @param  {Object} right
         * @return {Object} the target recrod
         */

    }, {
        key: '_mergeCoordinates',
        value: function _mergeCoordinates(arr, right) {
            var left = (0, _util.find)(arr, function (l) {
                return l.id === right.id;
            });

            if (left === undefined) {
                arr.push(right);
                return right;
            }

            left.x = (0, _util.averageIf)(left.x, right.x);
            left.y = (0, _util.averageIf)(left.y, right.y);
            return left;
        }

        /**
         * Merges provided screen input data with that of the queued report.
         * @param  {Object} data
         */

    }, {
        key: '_mergeScreen',
        value: function _mergeScreen(data) {
            var report = this.queued.report;

            for (var i = 0; data.screen && i < data.screen.length; i++) {
                var _right = data.screen[i];
                var _left = this._mergeCoordinates(report.screen, _right);

                if (_left !== _right) {
                    _left.clicks = (0, _util.addIf)(_left.clicks, _right.clicks);
                }
            }
        }

        /**
         * Resets queued data. Should be run after reports are sent.
         * @private
         */

    }, {
        key: 'resetQueued',
        value: function resetQueued() {
            this.queued = {
                report: {
                    joystick: [],
                    tactile: [],
                    screen: []
                },
                callbacks: []
            };

            this.lastSent = Date.now();
            this.waiting = false;
        }

        /**
         * Dispatches queued data out to the socket, and completes
         * any pending callbacks.
         * @private
         */

    }, {
        key: 'runSend',
        value: function runSend() {
            var q = this.queued;
            this.client.send(new _packets2.default.Report(q.report));

            for (var i = 0; i < q.callbacks.length; i++) {
                q.callbacks[i]();
            }

            this.resetQueued();
        }
    }]);

    return Reporter;
}();

exports.default = Reporter;