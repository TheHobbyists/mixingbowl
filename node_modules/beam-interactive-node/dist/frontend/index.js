'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _packets = require('./packets');

var _packets2 = _interopRequireDefault(_packets);

var _connector = require('../connector');

var _connector2 = _interopRequireDefault(_connector);

var _client = require('../client');

var _client2 = _interopRequireDefault(_client);

var _reporter = require('./reporter');

var _reporter2 = _interopRequireDefault(_reporter);

var _heartbeats = require('./heartbeats');

var _heartbeats2 = _interopRequireDefault(_heartbeats);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Frontend = function (_Client) {
    _inherits(Frontend, _Client);

    /**
     * Creates a new Robot that interacts with the remote server.
     * @param {Object} options
     * @param {String} options.remote Fully qualified address (including
     *                                ws(s)://) of the remote Robot server.
     * @param {Number} options.channel The channel ID to connect to.
     * @param {Number} options.user    The user ID.
     * @param {Number} options.ping.timeout Ping timeout duration
     * @param {Number} options.ping.interval Ping interval
     * @param {Boolean} [options.playbook=false] Whether the client should
     *                                           be started in playbook mode.
     * @param {Number} [options.reportInterval] Duration in milliseconds
     *                                          reports should be debounced
     *                                          to. Optional in playbook mode.
     * @param {String} options.key     Auth key obtained from the API.
     */
    function Frontend(options) {
        _classCallCheck(this, Frontend);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Frontend).call(this, options));

        _this.reporter = new _reporter2.default(_this, _this.options.reportInterval);
        return _this;
    }

    _createClass(Frontend, [{
        key: 'newConnector',
        value: function newConnector() {
            var _this2 = this;

            var endpoint = void 0;
            if (this.options.playbook) {
                endpoint = this.options.remote + '/playbook';
            } else {
                endpoint = this.options.remote + '/play/' + this.options.channel;
            }

            var socket = new _connector2.default(function (packet) {
                return packet.encode();
            }, function (data) {
                return _packets2.default.decode(data);
            }, _packets2.default.Error, endpoint);

            socket.heartbeater(new _heartbeats2.default(this.options.ping.interval, this.options.ping.timeout));

            socket.on('message', function (packet) {
                _this2.emit('message', packet);
                _this2.emit(packet.id, packet.props);
            });

            return socket;
        }

        /**
         * Sends a handshake packet and waits for a response from the server.
         * This method should be invoked prior to any other methods being run,
         * and it's expected that you'll wait for a callback before
         * invoking other methods.
         *
         * @param {Function} callback Invoked when a handshake resolves. Iff
         *                            it fails, it will be called with an error
         *                            as its first argument.
         */

    }, {
        key: 'handshake',
        value: function handshake(callback) {
            var _this3 = this;

            var connect = this.connect;

            connect.connect(function (err) {
                if (err) {
                    callback(err);
                } else {
                    _this3.call(new _packets2.default.Handshake({
                        id: _this3.options.user,
                        key: _this3.options.key
                    }), _packets2.default.HandshakeACK, callback);
                }
            });
        }

        /**
         * Sends a new report with some data.
         * @param {Object} data
         * @param {Function} callback
         */

    }, {
        key: 'report',
        value: function report(data) {
            var callback = arguments.length <= 1 || arguments[1] === undefined ? _util.noop : arguments[1];

            this.reporter.add(data, callback);
        }

        /**
         * Creates and returns a packet by name.
         * @param {String} name
         * @param {Object} [data] to populate the packet. If not passed, the
         *                        class will be returned.
         * @return {Object|Function}
         */

    }], [{
        key: 'Packet',
        value: function Packet(name, data) {
            var Packet = _packets2.default[name];
            if (Packet === undefined) {
                throw new Error('Tried to instatiate unknown packet "' + name + '".');
            }

            return data ? new Packet(data) : Packet;
        }
    }]);

    return Frontend;
}(_client2.default);

exports.default = Frontend;