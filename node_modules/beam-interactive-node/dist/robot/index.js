'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _packets = require('./packets');

var _packets2 = _interopRequireDefault(_packets);

var _connector = require('../connector');

var _connector2 = _interopRequireDefault(_connector);

var _client = require('../client');

var _client2 = _interopRequireDefault(_client);

var _heartbeats = require('./heartbeats');

var _heartbeats2 = _interopRequireDefault(_heartbeats);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Map of packet types to events that should be sent out on the robot.
var eventMap = [{ ev: 'report', obj: _packets2.default.Report }, { ev: 'error', obj: _packets2.default.Error }];

/**
 * Creates a new Robot that interacts with the remote server.
 * @param  {Object} options
 * @param  {String} options.remote  Address of the remote Robot server.
 * @param  {Number} options.channel The channel ID you're connecting to
 * @param  {String} options.key     Auth key obtained from the API.
 * @param {Boolean} [options.playbook=false] Whether the client should
 *                                           be started in playbook mode.
 * @param {Number} [options.reportInterval] Duration in milliseconds
 *                                          reports should be debounced
 *                                          to. Optional in playbook mode.
 */

var Robot = function (_Client) {
    _inherits(Robot, _Client);

    function Robot() {
        _classCallCheck(this, Robot);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(Robot).apply(this, arguments));
    }

    _createClass(Robot, [{
        key: 'newConnector',
        value: function newConnector() {
            var _this2 = this;

            var socket = new _connector2.default(function (packet) {
                return packet.encode();
            }, function (data) {
                return _packets2.default.decode(data);
            }, _packets2.default.Error, this.options.remote + '/robot');

            socket.heartbeater(new _heartbeats2.default(this.options.ping.interval, this.options.ping.timeout));

            socket.on('message', function (message) {
                var event = (0, _util.find)(eventMap, function (e) {
                    return message instanceof e.obj;
                });
                if (event) {
                    _this2.emit(event.ev, message);
                }
            });

            return socket;
        }

        /**
         * Sends a handshake packet and waits for a response from the server.
         * This method should be invoked prior to any other methods being run,
         * and it's expected that you'll wait for a callback before
         * invoking other methods.
         *
         * @param {Function} callback Invoked when a handshake resolves. Iff
         *                            it fails, it will be called with an error
         *                            as its first argument.
         */

    }, {
        key: 'handshake',
        value: function handshake(callback) {
            var _this3 = this;

            var connect = this.connect;

            connect.on('connect', function () {
                _this3.call(new _packets2.default.Handshake({
                    channel: _this3.options.channel,
                    streamKey: _this3.options.key
                }), _packets2.default.HandshakeACK, callback);
            });

            connect.connect();
        }
    }]);

    return Robot;
}(_client2.default);

exports.default = Robot;